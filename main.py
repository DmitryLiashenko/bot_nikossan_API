import os
import uuid
import replicate
import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Replicate
replicate_client = replicate.Client(api_token=REPLICATE_API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_photos = {}


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –æ–∫–Ω–∞, –∏ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –Ω–∞ –Ω—ë–º –±—É–¥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã. üåûü™ü"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo = update.message.photo[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
    user_photos[user_id] = photo.file_id

    keyboard = [
        [InlineKeyboardButton("–ñ–∞–ª—é–∑–∏ –¥–µ–Ω—å/–Ω–æ—á—å", callback_data="daynight")],
        [InlineKeyboardButton("–®—Ç–æ—Ä—ã", callback_data="curtains")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:", reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    file_id = user_photos.get(user_id)

    if not file_id:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
        return

    prompt = ""
    if query.data == "daynight":
        prompt = "add modern day-night blinds on the window"
    elif query.data == "curtains":
        prompt = "add light beige curtains on the window"

    try:
        await query.edit_message_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üß†")

        output_url = await process_with_flux(context.bot, file_id, prompt)

        await context.bot.send_photo(chat_id=user_id, photo=output_url)

    except Exception as e:
        await context.bot.send_message(
            chat_id=user_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}"
        )


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Replicate —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async def process_with_flux(bot, file_id: str, prompt: str) -> str:
    tg_file = await bot.get_file(file_id)
    file_bytes = await tg_file.download_as_bytearray()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    filename = f"temp_{uuid.uuid4().hex}.jpg"
    with open(filename, "wb") as f:
        f.write(file_bytes)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ file.io –≤—Ä–µ–º–µ–Ω–Ω–æ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±)
    with open(filename, "rb") as f:
        response = requests.post("https://file.io", files={"file": f})
        response.raise_for_status()
        data = response.json()
        if not data.get("success"):
            raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        image_url = data["link"]

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    os.remove(filename)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Replicate
    output = replicate_client.run(
        "black-forest-labs/flux-kontext-pro",
        input={"image": image_url, "prompt": prompt},
    )
    return output


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
